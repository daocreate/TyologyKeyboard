/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.typology.softkeyboard;

public final class R {
    public static final class anim {
        public static final int key_preview_fadein=0x7f040000;
        public static final int key_preview_fadeout=0x7f040001;
        public static final int mini_keyboard_fadein=0x7f040002;
        public static final int mini_keyboard_fadeout=0x7f040003;
    }
    public static final class array {
        /**  Symbols to be shown when completion is selected or no more completions are available 
         */
        public static final int freq_used_symbols=0x7f0c0000;
        public static final int keyboard_layout_modes=0x7f0c0008;
        public static final int keyboard_layout_modes_values=0x7f0c0009;
        /**  Array of prediction modes 
         */
        public static final int prediction_modes=0x7f0c0003;
        public static final int prediction_modes_values=0x7f0c0004;
        /**  Array of the settings key modes 
         */
        public static final int settings_key_modes=0x7f0c0002;
        /**  Array of the settings key mode values 
         */
        public static final int settings_key_modes_values=0x7f0c0001;
        /**  Array of Voice Input modes 
         */
        public static final int voice_input_modes=0x7f0c0005;
        /**  Array of Voice Input modes summary 
         */
        public static final int voice_input_modes_summary=0x7f0c0007;
        public static final int voice_input_modes_values=0x7f0c0006;
    }
    public static final class attr {
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int backgroundDimAmount=0x7f01000d;
        /**  Image for the key. This image needs to be a StateListDrawable, with the following
             possible states: normal, pressed, checkable, checkable+pressed, checkable+checked,
             checkable+checked+pressed. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int keyBackground=0x7f010001;
        /**  Hysteresis distance for key debouncing 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyHysteresisDistance=0x7f010008;
        /**  Height of the key press feedback popup. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyPreviewHeight=0x7f010007;
        /**  Layout resource for key press feedback.
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int keyPreviewLayout=0x7f010005;
        /**  Vertical offset of the key press feedback from the key. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyPreviewOffset=0x7f010006;
        /**  Color to use for the label in a key. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyTextColor=0x7f010004;
        /**  Size of the text for character keys. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyTextSize=0x7f010002;
        /** <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td></td></tr>
<tr><td><code>bold</code></td><td>1</td><td></td></tr>
<tr><td><code>italic</code></td><td>2</td><td></td></tr>
</table>
         */
        public static final int keyTextStyle=0x7f01000e;
        /**  Default KeyboardView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int keyboardViewStyle=0x7f010000;
        /**  Size of the text for custom keys with some text and no icon. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int labelTextSize=0x7f010003;
        /**  Layout resource for popup keyboards. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int popupLayout=0x7f01000a;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int shadowColor=0x7f01000b;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int shadowRadius=0x7f01000c;
        /** <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>white</code></td><td>0</td><td></td></tr>
<tr><td><code>black</code></td><td>1</td><td></td></tr>
</table>
         */
        public static final int symbolColorScheme=0x7f01000f;
        /**  Amount to offset the touch Y coordinate by, for bias correction. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int verticalCorrection=0x7f010009;
    }
    public static final class bool {
        public static final int config_long_press_comma_for_settings_enabled=0x7f080005;
        public static final int config_swipeDisambiguation=0x7f080002;
        /**  Whether or not Popup on key press is enabled by default 
         */
        public static final int default_popup_preview=0x7f080003;
        public static final int default_recorrection_enabled=0x7f080004;
        /**  Whether or not auto-correction should be enabled by default 
         */
        public static final int enable_autocorrect=0x7f080000;
        /**  Whether this input method should be used as the default for a locale. Override it
         for latin languages. 
         */
        public static final int im_is_default=0x7f080001;
    }
    public static final class color {
        public static final int candidate_normal=0x7f090000;
        public static final int candidate_other=0x7f090002;
        public static final int candidate_recommended=0x7f090001;
        public static final int latinkeyboard_bar_language_shadow_black=0x7f090005;
        public static final int latinkeyboard_bar_language_shadow_white=0x7f090004;
        public static final int latinkeyboard_bar_language_text=0x7f090006;
        public static final int latinkeyboard_extension_background=0x7f090007;
        public static final int latinkeyboard_feedback_language_text=0x7f090008;
        public static final int latinkeyboard_key_color_black=0x7f09000a;
        public static final int latinkeyboard_key_color_white=0x7f090009;
        public static final int latinkeyboard_transparent=0x7f090003;
    }
    public static final class dimen {
        public static final int ambilwarna_hsvHeight=0x7f0b0000;
        public static final int ambilwarna_hsvWidth=0x7f0b0001;
        public static final int ambilwarna_hueWidth=0x7f0b0002;
        public static final int ambilwarna_spacer=0x7f0b0003;
        public static final int candidate_font_height=0x7f0b0005;
        public static final int candidate_min_touchable_width=0x7f0b0018;
        public static final int candidate_strip_fading_edge_length=0x7f0b000c;
        public static final int candidate_strip_height=0x7f0b000b;
        public static final int candidate_vertical_padding=0x7f0b0006;
        public static final int key_bottom_gap=0x7f0b0007;
        /**  key_height + key_bottom_gap = popup_key_height 
         */
        public static final int key_height=0x7f0b0004;
        public static final int key_hysteresis_distance=0x7f0b0016;
        public static final int key_label_text_size=0x7f0b0010;
        /**  key_preview_text_size_large x 2 
         */
        public static final int key_preview_height=0x7f0b0013;
        public static final int key_preview_offset=0x7f0b0012;
        public static final int key_preview_text_size_large=0x7f0b0011;
        public static final int key_text_size=0x7f0b000f;
        public static final int keyboard_bottom_padding=0x7f0b000a;
        public static final int keyboard_top_padding=0x7f0b0009;
        /** 
         We use "inch", not "dp" because this value tries dealing with physical distance related
         to user's finger.
    
         */
        public static final int keyboard_vertical_correction=0x7f0b0017;
        /** 
         If the screen height in landscape is larger than the below value, then the keyboard
         will not go into extract (fullscreen) mode.
    
         */
        public static final int max_height_for_fullscreen=0x7f0b000e;
        /**  Amount of allowance for selecting keys in a mini popup keyboard by sliding finger. 
 popup_key_height x 1.7 
         */
        public static final int mini_keyboard_slide_allowance=0x7f0b0014;
        /**  popup_key_height x 1.0 
         */
        public static final int mini_keyboard_vertical_correction=0x7f0b0015;
        public static final int popup_key_height=0x7f0b0008;
        public static final int spacebar_vertical_correction=0x7f0b000d;
    }
    public static final class drawable {
        public static final int btn_keyboard_key_gingerbread=0x7f020000;
        public static final int btn_keyboard_key_gingerbread_dark_normal=0x7f020001;
        public static final int btn_keyboard_key_gingerbread_dark_normal_off=0x7f020002;
        public static final int btn_keyboard_key_gingerbread_dark_normal_on=0x7f020003;
        public static final int btn_keyboard_key_gingerbread_dark_pressed=0x7f020004;
        public static final int btn_keyboard_key_gingerbread_dark_pressed_off=0x7f020005;
        public static final int btn_keyboard_key_gingerbread_dark_pressed_on=0x7f020006;
        public static final int btn_keyboard_key_gingerbread_light_normal=0x7f020007;
        public static final int btn_keyboard_key_gingerbread_light_pressed=0x7f020008;
        public static final int btn_keyboard_key_light_popup_normal=0x7f020009;
        public static final int btn_keyboard_key_light_popup_selected=0x7f02000a;
        public static final int btn_keyboard_key_popup=0x7f02000b;
        public static final int btn_keyboard_key_typology=0x7f02000c;
        public static final int btn_keyboard_key_typology_dark_normal=0x7f02000d;
        public static final int btn_keyboard_key_typology_dark_normal_off=0x7f02000e;
        public static final int btn_keyboard_key_typology_dark_normal_on=0x7f02000f;
        public static final int btn_keyboard_key_typology_dark_pressed=0x7f020010;
        public static final int btn_keyboard_key_typology_dark_pressed_off=0x7f020011;
        public static final int btn_keyboard_key_typology_dark_pressed_on=0x7f020012;
        public static final int btn_keyboard_key_typology_light_normal=0x7f020013;
        public static final int btn_keyboard_key_typology_light_pressed=0x7f020014;
        public static final int keyboard_background_black=0x7f020015;
        public static final int keyboard_background_grey=0x7f020016;
        public static final int keyboard_hint_0=0x7f020017;
        public static final int keyboard_hint_1=0x7f020018;
        public static final int keyboard_hint_2=0x7f020019;
        public static final int keyboard_hint_3=0x7f02001a;
        public static final int keyboard_hint_4=0x7f02001b;
        public static final int keyboard_hint_5=0x7f02001c;
        public static final int keyboard_hint_6=0x7f02001d;
        public static final int keyboard_hint_7=0x7f02001e;
        public static final int keyboard_hint_8=0x7f02001f;
        public static final int keyboard_hint_9=0x7f020020;
        public static final int keyboard_key_feedback=0x7f020021;
        public static final int keyboard_key_feedback_more=0x7f020022;
        public static final int keyboard_key_feedback_nomore=0x7f020023;
        public static final int keyboard_popup_panel_background=0x7f020024;
        public static final int sym_keyboard_delete=0x7f020025;
        public static final int sym_keyboard_feedback_delete=0x7f020026;
        public static final int sym_keyboard_feedback_numalt=0x7f020027;
        public static final int sym_keyboard_feedback_return=0x7f020028;
        public static final int sym_keyboard_feedback_search=0x7f020029;
        public static final int sym_keyboard_feedback_settings=0x7f02002a;
        public static final int sym_keyboard_feedback_space=0x7f02002b;
        public static final int sym_keyboard_num0=0x7f02002c;
        public static final int sym_keyboard_num1=0x7f02002d;
        public static final int sym_keyboard_num2=0x7f02002e;
        public static final int sym_keyboard_num3=0x7f02002f;
        public static final int sym_keyboard_num4=0x7f020030;
        public static final int sym_keyboard_num5=0x7f020031;
        public static final int sym_keyboard_num6=0x7f020032;
        public static final int sym_keyboard_num7=0x7f020033;
        public static final int sym_keyboard_num8=0x7f020034;
        public static final int sym_keyboard_num9=0x7f020035;
        public static final int sym_keyboard_numalt=0x7f020036;
        public static final int sym_keyboard_numpound=0x7f020037;
        public static final int sym_keyboard_numstar=0x7f020038;
        public static final int sym_keyboard_return=0x7f020039;
        public static final int sym_keyboard_search=0x7f02003a;
        public static final int sym_keyboard_settings=0x7f02003b;
        public static final int sym_keyboard_shift_off=0x7f02003c;
        public static final int sym_keyboard_shift_on=0x7f02003d;
        public static final int sym_keyboard_space=0x7f02003e;
        public static final int typology_icon_hdpi=0x7f02003f;
    }
    public static final class id {
        public static final int LatinKeyboardBaseView=0x7f070006;
        public static final int LatinkeyboardBaseView=0x7f070005;
        public static final int black=0x7f070004;
        public static final int bold=0x7f070001;
        public static final int italic=0x7f070002;
        public static final int normal=0x7f070000;
        public static final int white=0x7f070003;
    }
    public static final class integer {
        public static final int config_delay_after_preview=0x7f0a0000;
        public static final int config_delay_before_key_repeat_start=0x7f0a0003;
        public static final int config_key_repeat_interval=0x7f0a0004;
        public static final int config_long_press_key_timeout=0x7f0a0005;
        public static final int config_multi_tap_key_timeout=0x7f0a0006;
        public static final int config_preview_fadein_anim_time=0x7f0a0001;
        public static final int config_preview_fadeout_anim_time=0x7f0a0002;
        public static final int key_delete=0x7f0a000d;
        public static final int key_f1=0x7f0a0010;
        public static final int key_return=0x7f0a0009;
        /**  Keycode for F1 (function) key. This one switches between language switch & comma/.com 
         */
        public static final int key_settings=0x7f0a000e;
        public static final int key_shift=0x7f0a000b;
        public static final int key_space=0x7f0a000a;
        public static final int key_symbol=0x7f0a000c;
        public static final int key_tab=0x7f0a0008;
        public static final int key_voice=0x7f0a000f;
        /**  Vibration duration in milliseconds, for key presses in the IME. This can be hardware
        dependent and may require overriding with a device specific overlay. 
         */
        public static final int vibrate_duration_ms=0x7f0a0007;
    }
    public static final class layout {
        public static final int input_gingerbread=0x7f030000;
        public static final int input_typology=0x7f030001;
        public static final int key_preview=0x7f030002;
        public static final int keyboard_popup=0x7f030003;
    }
    public static final class string {
        /**  Indicates that a word has been added to the dictionary 
         */
        public static final int added_word=0x7f06003b;
        public static final int alternates_for_a=0x7f060000;
        public static final int alternates_for_e=0x7f060001;
        public static final int alternates_for_i=0x7f060002;
        public static final int alternates_for_o=0x7f060003;
        public static final int alternates_for_p=0x7f060006;
        public static final int alternates_for_q=0x7f060007;
        public static final int alternates_for_r=0x7f060008;
        public static final int alternates_for_s=0x7f060005;
        public static final int alternates_for_t=0x7f060009;
        public static final int alternates_for_u=0x7f060004;
        public static final int alternates_for_w=0x7f06000a;
        public static final int alternates_for_z=0x7f06000b;
        /**  Option to enable auto capitalization of sentences 
         */
        public static final int auto_cap=0x7f060028;
        /**  Description for auto cap 
         */
        public static final int auto_cap_summary=0x7f060029;
        /**  Option to enable auto completion 
         */
        public static final int auto_complete=0x7f060030;
        /**  Dialog title for auto complete choices 
         */
        public static final int auto_complete_dialog_title=0x7f060025;
        /**  Description for auto completion 
         */
        public static final int auto_complete_summary=0x7f060031;
        /**  Option to automatically correct word on hitting space 
         */
        public static final int auto_correction=0x7f060020;
        /**  Description for auto_correction 
         */
        public static final int auto_correction_summary=0x7f060021;
        /**  Option to enable auto punctuate 
         */
        public static final int auto_punctuate=0x7f06002a;
        /**  Description for auto punctuate 
         */
        public static final int auto_punctuate_summary=0x7f06002b;
        /**  Press the "enter" key after the user speaks. Option on settings.
         */
        public static final int auto_submit=0x7f06006a;
        /**  Press the "enter" key after the user speaks. Summary of option in settings.
         */
        public static final int auto_submit_summary=0x7f06006b;
        /**  Option to enable bigram completion 
         */
        public static final int bigram_suggestion=0x7f060036;
        /**  Description for auto completion 
         */
        public static final int bigram_suggestion_summary=0x7f060037;
        /**  Label on button to stop recognition. Must be short to fit on button. 
         */
        public static final int cancel=0x7f060064;
        /**  appears above the image showing the back button used to close the keyboard 
         */
        public static final int close_the_keyboard=0x7f06006d;
        /**  Title for Latin keyboard debug settings activity / dialog 
         */
        public static final int english_ime_debug_settings=0x7f060086;
        /**  Title for Latin keyboard input options dialog 
         */
        public static final int english_ime_input_options=0x7f060018;
        /**  Title for Latin keyboard settings activity / dialog 
         */
        public static final int english_ime_settings=0x7f060017;
        /**  Inform the user that a particular language has an available dictionary 
         */
        public static final int has_dictionary=0x7f060079;
        /**  Add to dictionary hint 
         */
        public static final int hint_add_to_dictionary=0x7f060078;
        /**  Option to enable using nearby keys when correcting/predicting 
         */
        public static final int hit_correction=0x7f06001c;
        /**  Option to enable using nearby keys when correcting/predicting in landscape
         */
        public static final int hit_correction_land=0x7f06001e;
        /**  Description for hit_correction in landscape 
         */
        public static final int hit_correction_land_summary=0x7f06001f;
        /**  Description for hit_correction  
         */
        public static final int hit_correction_summary=0x7f06001d;
        /**  Title for Latin keyboard  
         */
        public static final int ime_name=0x7f060016;
        /**  Description for keyboard theme switcher 
         */
        public static final int keyboard_layout=0x7f06007e;
        /**  appears above image showing how to access keyboard settings 
         */
        public static final int keyboard_settings=0x7f06006f;
        /**  Label for "switch to alphabetic" key.  Must be short to fit on key! 
         */
        public static final int label_alpha_key=0x7f06004e;
        /**  Label for ALT modifier key.  Must be short to fit on key! 
         */
        public static final int label_alt_key=0x7f06004f;
        /**  Label for soft enter key when it performs DONE action.  Must be short to fit on key! 
 Label for soft enter key when it performs DONE action.  Must be short to fit on key! 
         */
        public static final int label_done_key=0x7f06004a;
        /**  Label for soft enter key when it performs GO action.  Must be short to fit on key! 
 Label for soft enter key when it performs GO action.  Must be short to fit on key! 
         */
        public static final int label_go_key=0x7f060048;
        /**  Label for soft enter key when it performs NEXT action.  Must be short to fit on key! 
 Label for soft enter key when it performs NEXT action.  Must be short to fit on key! 
         */
        public static final int label_next_key=0x7f060049;
        /**  Label for "Pause" key 
 Label for "Pause" key 
         */
        public static final int label_pause_key=0x7f060050;
        /**  Label for "switch to numeric" key.  Must be short to fit on key! 
         */
        public static final int label_phone_key=0x7f06004d;
        /**  Label for soft enter key when it performs SEND action.  Must be short to fit on key! 
 Label for soft enter key when it performs SEND action.  Must be short to fit on key! 
         */
        public static final int label_send_key=0x7f06004b;
        /**  Label for "switch to symbols" key.  Must be short to fit on key! 
         */
        public static final int label_symbol_key=0x7f06004c;
        /**  Label for "Wait" key 
 Label for "Wait" key 
         */
        public static final int label_wait_key=0x7f060051;
        /**  Title summary for input language selection screen 
         */
        public static final int language_selection_summary=0x7f060077;
        /**  Title for input language selection screen 
         */
        public static final int language_selection_title=0x7f060076;
        public static final int layout_basic=0x7f06007f;
        public static final int layout_gingerbread=0x7f060083;
        public static final int layout_high_contrast=0x7f060080;
        public static final int layout_stone_bold=0x7f060081;
        public static final int layout_stone_normal=0x7f060082;
        public static final int no_space_before_separators=0x7f06000e;
        public static final int numbers=0x7f060011;
        /**  Label on button when an error occurs 
         */
        public static final int ok=0x7f060065;
        /**  appears above image showing the user to click on a TextView to show the IME 
         */
        public static final int open_the_keyboard=0x7f06006c;
        /**  popular web domains for the locale - most popular, displayed on the keyboard 
         */
        public static final int popular_domain_0=0x7f060070;
        /**  popular web domains for the locale - item 1, displayed in the popup 
         */
        public static final int popular_domain_1=0x7f060071;
        /**  popular web domains for the locale - item 2, displayed in the popup 
         */
        public static final int popular_domain_2=0x7f060072;
        /**  popular web domains for the locale - item 3, displayed in the popup 
         */
        public static final int popular_domain_3=0x7f060073;
        /**  popular web domains for the locale - item 4, displayed in the popup 
         */
        public static final int popular_domain_4=0x7f060074;
        /**  Option to pop up the character with a larger font above soft keyboard 
         */
        public static final int popup_on_keypress=0x7f06001b;
        /**  Option to enable text prediction 
         */
        public static final int prediction=0x7f060022;
        /**  Don't translate 
         */
        public static final int prediction_basic=0x7f060039;
        /**  Category title for text prediction 
         */
        public static final int prediction_category=0x7f060023;
        /**  Don't translate 
         */
        public static final int prediction_full=0x7f06003a;
        /**  Option to enable text prediction in landscape 
         */
        public static final int prediction_landscape=0x7f060026;
        /**  Description for text prediction 
         */
        public static final int prediction_landscape_summary=0x7f060027;
        /**  Don't translate 
         */
        public static final int prediction_none=0x7f060038;
        /**  Description for text prediction 
         */
        public static final int prediction_summary=0x7f060024;
        public static final int prefs_debug_mode=0x7f060087;
        /**  Description for enabling to send user statistics to Google 
         */
        public static final int prefs_description_log=0x7f06007b;
        /**  Preferences item for enabling to send user statistics to Google 
         */
        public static final int prefs_enable_log=0x7f06007a;
        /**  Preferences item for enabling to correct suggestions by touching words you have typed 
         */
        public static final int prefs_enable_recorrection=0x7f06007c;
        /**  The summary for the preferences item for enabling to correct suggestions by touching words you have typed 
         */
        public static final int prefs_enable_recorrection_summary=0x7f06007d;
        /**  Option to show/hide the settings key 
         */
        public static final int prefs_settings_key=0x7f060032;
        /**  Option to enable quick fixes 
         */
        public static final int quick_fixes=0x7f06002c;
        /**  Description for quick fixes 
         */
        public static final int quick_fixes_summary=0x7f06002d;
        /**  Menu item for launching Input method picker 
         */
        public static final int selectInputMethod=0x7f060075;
        /**  sentence separators do not contain the "." because it is handeled specially due to number processing 
         */
        public static final int sentence_separators=0x7f06000d;
        /**  Always hide the settings key 
         */
        public static final int settings_key_mode_always_hide=0x7f060015;
        /**  Option to always hide the settings key 
         */
        public static final int settings_key_mode_always_hide_name=0x7f060035;
        /**  Always show the settings key 
         */
        public static final int settings_key_mode_always_show=0x7f060014;
        /**  Option to always show the settings key 
         */
        public static final int settings_key_mode_always_show_name=0x7f060034;
        /**  Option values to show/hide the settings key in onscreen keyboard 
 Automatically decide to show or hide the settings key 
         */
        public static final int settings_key_mode_auto=0x7f060013;
        /**  Option to automatically decide to show/hide the settings key 
         */
        public static final int settings_key_mode_auto_name=0x7f060033;
        public static final int shift_space_separators=0x7f060010;
        /**  Option to enable showing suggestions 
         */
        public static final int show_suggestions=0x7f06002e;
        /**  Description for show suggestions 
         */
        public static final int show_suggestions_summary=0x7f06002f;
        /**  Option to play back sound on keypress in soft keyboard 
         */
        public static final int sound_on_keypress=0x7f06001a;
        public static final int space_afterwards_separators=0x7f06000f;
        public static final int subtype_mode_keyboard=0x7f060084;
        public static final int subtype_mode_voice=0x7f060085;
        /**  Symbols that are suggested between words 
         */
        public static final int suggested_punctuations=0x7f060012;
        /**  Tip to press ?123 to access numbers and symbols 
         */
        public static final int tip_access_symbols=0x7f06003e;
        /**  Tip to long press on typed word to add to dictionary 
         */
        public static final int tip_add_to_dictionary=0x7f06003f;
        /**  Tip to dismiss keyboard 
         */
        public static final int tip_dismiss=0x7f06003d;
        /**  Tip to long press on keys 
         */
        public static final int tip_long_press=0x7f06003c;
        /**  Tutorial tip 4 - How to switch back to alphabet keyboard 
         */
        public static final int tip_to_close_symbols=0x7f060045;
        /**  Tutorial tip 5 - How to launch keyboard settings 
         */
        public static final int tip_to_launch_settings=0x7f060046;
        /**  Tutorial tip 1 - The keyboard opens any time you touch a text field 
         */
        public static final int tip_to_open_keyboard=0x7f060042;
        /**  Tutorial tip 3 - How to switch to number/symbol keyboard 
         */
        public static final int tip_to_open_symbols=0x7f060044;
        /**  Tutorial tip 6 - Done with the tutorial 
         */
        public static final int tip_to_start_typing=0x7f060047;
        /**  Tutorial tip 2 - Touch and hold a key to view accents (examples) 
         */
        public static final int tip_to_view_accents=0x7f060043;
        /**  appears above image showing how to use touch and hold 
         */
        public static final int touch_and_hold=0x7f06006e;
        /**  Instruction to touch the bubble to continue 
         */
        public static final int touch_to_continue=0x7f060040;
        /**  Instruction to touch the bubble to start typing 
         */
        public static final int touch_to_finish=0x7f060041;
        /**  Option to provide vibrate/haptic feedback on keypress 
         */
        public static final int vibrate_on_keypress=0x7f060019;
        /**  Short message shown for an audio error. 
         */
        public static final int voice_audio_error=0x7f06005d;
        /**  Short message shown when a generic error occurs. 
         */
        public static final int voice_error=0x7f06005a;
        /**  Message to show when user clicks the swiping hint (which says
        "Swipe across keyboard to speak"). Also shown when enabling settings. 
         */
        public static final int voice_hint_dialog_message=0x7f060056;
        /**  Short message shown before the user should speak. 
         */
        public static final int voice_initializing=0x7f060059;
        /**  Preferences item for enabling speech input 
         */
        public static final int voice_input=0x7f060066;
        /**  Short message to tell the user the system is ready for them to speak. 
         */
        public static final int voice_listening=0x7f060057;
        /**  Don't translate 
         */
        public static final int voice_mode_main=0x7f060067;
        /**  Don't translate 
         */
        public static final int voice_mode_off=0x7f060069;
        /**  Don't translate 
         */
        public static final int voice_mode_symbols=0x7f060068;
        /**  Short message shown for a network error. 
         */
        public static final int voice_network_error=0x7f06005b;
        /**  Short message shown when the server couldn't parse any speech. 
         */
        public static final int voice_no_match=0x7f060060;
        /**  Short message shown when the user initiates voice and voice
	search is not installed. 
         */
        public static final int voice_not_installed=0x7f060061;
        /**  Short hint shown in candidate view to explain that user can speak punctuation. 
         */
        public static final int voice_punctuation_hint=0x7f060063;
        /**  Short message shown for an error with the voice server. 
         */
        public static final int voice_server_error=0x7f06005e;
        /**  Short message shown when no speech is heard. 
         */
        public static final int voice_speech_timeout=0x7f06005f;
        /**  Short hint shown in candidate view to explain voice input. 
         */
        public static final int voice_swipe_hint=0x7f060062;
        /**  Short message shown for a network error where the utterance was really long,
         in which case we should suggest that the user speak less. 
         */
        public static final int voice_too_much_speech=0x7f06005c;
        /**  An additional part of the warning dialog for voice input that only shows when the user
         actually initiates voice input, rather than just turning it on in settings. 
         */
        public static final int voice_warning_how_to_turn_off=0x7f060055;
        /**  Message that gets put at the top of the warning dialog if the user is attempting to use
         voice input in a currently unsupported locale. Voice input will work for such a user,
         but it will only recognize them in English. 
         */
        public static final int voice_warning_locale_not_supported=0x7f060053;
        /**  Message of the warning dialog that shows when a user initiates voice input for
         the first time, or turns it on in settings. 
         */
        public static final int voice_warning_may_not_understand=0x7f060054;
        /**  Voice related labels 
 Title of the warning dialog that shows when a user initiates voice input for
         the first time. 
         */
        public static final int voice_warning_title=0x7f060052;
        /**  Short message shown after the user finishes speaking. 
         */
        public static final int voice_working=0x7f060058;
        /**  Symbols that are commonly considered word or sentence separators in this language 
 word separators do not contain the "," because it is handeled specially due to number processing 
         */
        public static final int word_separators=0x7f06000c;
    }
    public static final class style {
        public static final int KeyPreviewAnimation=0x7f0d0001;
        public static final int LatinKeyboardBaseView=0x7f0d0000;
        public static final int MiniKeyboardAnimation=0x7f0d0002;
    }
    public static final class xml {
        public static final int method=0x7f050000;
        public static final int mini=0x7f050001;
        public static final int phone=0x7f050002;
        public static final int phone_symbols=0x7f050003;
        public static final int popup_punctuation=0x7f050004;
        public static final int popup_smileys=0x7f050005;
        public static final int qwertz=0x7f050006;
        public static final int symbols=0x7f050007;
        public static final int symbols_shift=0x7f050008;
    }
    public static final class styleable {
        /** Attributes that can be used with a LatinKeyboardBaseView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_backgroundDimAmount com.typology.softkeyboard:backgroundDimAmount}</code></td><td></td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_keyBackground com.typology.softkeyboard:keyBackground}</code></td><td> Image for the key.</td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_keyHysteresisDistance com.typology.softkeyboard:keyHysteresisDistance}</code></td><td> Hysteresis distance for key debouncing </td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_keyPreviewHeight com.typology.softkeyboard:keyPreviewHeight}</code></td><td> Height of the key press feedback popup.</td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_keyPreviewLayout com.typology.softkeyboard:keyPreviewLayout}</code></td><td> Layout resource for key press feedback.</td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_keyPreviewOffset com.typology.softkeyboard:keyPreviewOffset}</code></td><td> Vertical offset of the key press feedback from the key.</td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_keyTextColor com.typology.softkeyboard:keyTextColor}</code></td><td> Color to use for the label in a key.</td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_keyTextSize com.typology.softkeyboard:keyTextSize}</code></td><td> Size of the text for character keys.</td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_keyTextStyle com.typology.softkeyboard:keyTextStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_keyboardViewStyle com.typology.softkeyboard:keyboardViewStyle}</code></td><td> Default KeyboardView style.</td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_labelTextSize com.typology.softkeyboard:labelTextSize}</code></td><td> Size of the text for custom keys with some text and no icon.</td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_popupLayout com.typology.softkeyboard:popupLayout}</code></td><td> Layout resource for popup keyboards.</td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_shadowColor com.typology.softkeyboard:shadowColor}</code></td><td></td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_shadowRadius com.typology.softkeyboard:shadowRadius}</code></td><td></td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_symbolColorScheme com.typology.softkeyboard:symbolColorScheme}</code></td><td></td></tr>
           <tr><td><code>{@link #LatinKeyboardBaseView_verticalCorrection com.typology.softkeyboard:verticalCorrection}</code></td><td> Amount to offset the touch Y coordinate by, for bias correction.</td></tr>
           </table>
           @see #LatinKeyboardBaseView_backgroundDimAmount
           @see #LatinKeyboardBaseView_keyBackground
           @see #LatinKeyboardBaseView_keyHysteresisDistance
           @see #LatinKeyboardBaseView_keyPreviewHeight
           @see #LatinKeyboardBaseView_keyPreviewLayout
           @see #LatinKeyboardBaseView_keyPreviewOffset
           @see #LatinKeyboardBaseView_keyTextColor
           @see #LatinKeyboardBaseView_keyTextSize
           @see #LatinKeyboardBaseView_keyTextStyle
           @see #LatinKeyboardBaseView_keyboardViewStyle
           @see #LatinKeyboardBaseView_labelTextSize
           @see #LatinKeyboardBaseView_popupLayout
           @see #LatinKeyboardBaseView_shadowColor
           @see #LatinKeyboardBaseView_shadowRadius
           @see #LatinKeyboardBaseView_symbolColorScheme
           @see #LatinKeyboardBaseView_verticalCorrection
         */
        public static final int[] LatinKeyboardBaseView = {
            0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003,
            0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007,
            0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b,
            0x7f01000c, 0x7f01000d, 0x7f01000e, 0x7f01000f
        };
        /**
          <p>This symbol is the offset where the {@link com.typology.softkeyboard.R.attr#backgroundDimAmount}
          attribute's value can be found in the {@link #LatinKeyboardBaseView} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:backgroundDimAmount
        */
        public static final int LatinKeyboardBaseView_backgroundDimAmount = 13;
        /**
          <p>
          @attr description
           Image for the key. This image needs to be a StateListDrawable, with the following
             possible states: normal, pressed, checkable, checkable+pressed, checkable+checked,
             checkable+checked+pressed. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:keyBackground
        */
        public static final int LatinKeyboardBaseView_keyBackground = 1;
        /**
          <p>
          @attr description
           Hysteresis distance for key debouncing 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyHysteresisDistance
        */
        public static final int LatinKeyboardBaseView_keyHysteresisDistance = 8;
        /**
          <p>
          @attr description
           Height of the key press feedback popup. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyPreviewHeight
        */
        public static final int LatinKeyboardBaseView_keyPreviewHeight = 7;
        /**
          <p>
          @attr description
           Layout resource for key press feedback.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:keyPreviewLayout
        */
        public static final int LatinKeyboardBaseView_keyPreviewLayout = 5;
        /**
          <p>
          @attr description
           Vertical offset of the key press feedback from the key. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyPreviewOffset
        */
        public static final int LatinKeyboardBaseView_keyPreviewOffset = 6;
        /**
          <p>
          @attr description
           Color to use for the label in a key. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyTextColor
        */
        public static final int LatinKeyboardBaseView_keyTextColor = 4;
        /**
          <p>
          @attr description
           Size of the text for character keys. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyTextSize
        */
        public static final int LatinKeyboardBaseView_keyTextSize = 2;
        /**
          <p>This symbol is the offset where the {@link com.typology.softkeyboard.R.attr#keyTextStyle}
          attribute's value can be found in the {@link #LatinKeyboardBaseView} array.


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td></td></tr>
<tr><td><code>bold</code></td><td>1</td><td></td></tr>
<tr><td><code>italic</code></td><td>2</td><td></td></tr>
</table>
          @attr name android:keyTextStyle
        */
        public static final int LatinKeyboardBaseView_keyTextStyle = 14;
        /**
          <p>
          @attr description
           Default KeyboardView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:keyboardViewStyle
        */
        public static final int LatinKeyboardBaseView_keyboardViewStyle = 0;
        /**
          <p>
          @attr description
           Size of the text for custom keys with some text and no icon. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:labelTextSize
        */
        public static final int LatinKeyboardBaseView_labelTextSize = 3;
        /**
          <p>
          @attr description
           Layout resource for popup keyboards. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:popupLayout
        */
        public static final int LatinKeyboardBaseView_popupLayout = 10;
        /**
          <p>This symbol is the offset where the {@link com.typology.softkeyboard.R.attr#shadowColor}
          attribute's value can be found in the {@link #LatinKeyboardBaseView} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:shadowColor
        */
        public static final int LatinKeyboardBaseView_shadowColor = 11;
        /**
          <p>This symbol is the offset where the {@link com.typology.softkeyboard.R.attr#shadowRadius}
          attribute's value can be found in the {@link #LatinKeyboardBaseView} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:shadowRadius
        */
        public static final int LatinKeyboardBaseView_shadowRadius = 12;
        /**
          <p>This symbol is the offset where the {@link com.typology.softkeyboard.R.attr#symbolColorScheme}
          attribute's value can be found in the {@link #LatinKeyboardBaseView} array.


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>white</code></td><td>0</td><td></td></tr>
<tr><td><code>black</code></td><td>1</td><td></td></tr>
</table>
          @attr name android:symbolColorScheme
        */
        public static final int LatinKeyboardBaseView_symbolColorScheme = 15;
        /**
          <p>
          @attr description
           Amount to offset the touch Y coordinate by, for bias correction. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:verticalCorrection
        */
        public static final int LatinKeyboardBaseView_verticalCorrection = 9;
    };
}
